# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import server_side_pb2 as server__side__pb2


class P2PStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getNeighbors = channel.unary_unary(
        '/server_side.P2P/getNeighbors',
        request_serializer=server__side__pb2.ServerInfo.SerializeToString,
        response_deserializer=server__side__pb2.ServerInfo.FromString,
        )
    self.exit = channel.unary_unary(
        '/server_side.P2P/exit',
        request_serializer=server__side__pb2.ServerInfo.SerializeToString,
        response_deserializer=server__side__pb2.ServerInfo.FromString,
        )
    self.join = channel.unary_unary(
        '/server_side.P2P/join',
        request_serializer=server__side__pb2.ServerInfo.SerializeToString,
        response_deserializer=server__side__pb2.ServerInfo.FromString,
        )
    self.build_finger_table = channel.unary_unary(
        '/server_side.P2P/build_finger_table',
        request_serializer=server__side__pb2.FingerTable.SerializeToString,
        response_deserializer=server__side__pb2.FingerTable.FromString,
        )
    self.notify_cluster = channel.unary_unary(
        '/server_side.P2P/notify_cluster',
        request_serializer=server__side__pb2.FingerTable.SerializeToString,
        response_deserializer=server__side__pb2.Void.FromString,
        )


class P2PServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getNeighbors(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def exit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def join(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def build_finger_table(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def notify_cluster(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_P2PServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getNeighbors': grpc.unary_unary_rpc_method_handler(
          servicer.getNeighbors,
          request_deserializer=server__side__pb2.ServerInfo.FromString,
          response_serializer=server__side__pb2.ServerInfo.SerializeToString,
      ),
      'exit': grpc.unary_unary_rpc_method_handler(
          servicer.exit,
          request_deserializer=server__side__pb2.ServerInfo.FromString,
          response_serializer=server__side__pb2.ServerInfo.SerializeToString,
      ),
      'join': grpc.unary_unary_rpc_method_handler(
          servicer.join,
          request_deserializer=server__side__pb2.ServerInfo.FromString,
          response_serializer=server__side__pb2.ServerInfo.SerializeToString,
      ),
      'build_finger_table': grpc.unary_unary_rpc_method_handler(
          servicer.build_finger_table,
          request_deserializer=server__side__pb2.FingerTable.FromString,
          response_serializer=server__side__pb2.FingerTable.SerializeToString,
      ),
      'notify_cluster': grpc.unary_unary_rpc_method_handler(
          servicer.notify_cluster,
          request_deserializer=server__side__pb2.FingerTable.FromString,
          response_serializer=server__side__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'server_side.P2P', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
